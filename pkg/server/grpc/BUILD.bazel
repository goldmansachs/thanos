load("@io_bazel_rules_go//go:def.bzl", "go_library")

go_library(
    name = "grpc",
    srcs = [
        "grpc.go",
        "option.go",
        "request_id.go",
    ],
    importpath = "github.com/thanos-io/thanos/pkg/server/grpc",
    visibility = ["//visibility:public"],
    deps = [
        "//pkg/component",
        "//pkg/logging",
        "//pkg/prober",
        "//pkg/server/http/middleware",
        "//pkg/tracing",
        "@com_github_go_kit_log//:log",
        "@com_github_go_kit_log//level",
        "@com_github_grpc_ecosystem_go_grpc_middleware//providers/prometheus",
        "@com_github_grpc_ecosystem_go_grpc_middleware_v2//interceptors",
        "@com_github_grpc_ecosystem_go_grpc_middleware_v2//interceptors/logging",
        "@com_github_grpc_ecosystem_go_grpc_middleware_v2//interceptors/recovery",
        "@com_github_grpc_ecosystem_go_grpc_middleware_v2//interceptors/selector",
        "@com_github_opentracing_opentracing_go//:opentracing-go",
        "@com_github_pkg_errors//:errors",
        "@com_github_prometheus_client_golang//prometheus",
        "@com_github_prometheus_client_golang//prometheus/promauto",
        "@org_golang_google_grpc//:grpc",
        "@org_golang_google_grpc//codes",
        "@org_golang_google_grpc//credentials",
        "@org_golang_google_grpc//health/grpc_health_v1",
        "@org_golang_google_grpc//keepalive",
        "@org_golang_google_grpc//metadata",
        "@org_golang_google_grpc//reflection",
        "@org_golang_google_grpc//status",
    ],
)

alias(
    name = "go_default_library",
    actual = ":grpc",
    visibility = ["//visibility:public"],
)
