load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "grpcclient",
    srcs = [
        "backoff_retry.go",
        "grpcclient.go",
        "instrumentation.go",
        "ratelimit.go",
    ],
    importpath = "github.com/prometheus/common/internal/cortex/util/grpcclient",
    visibility = ["//:__subpackages__"],
    deps = [
        "//internal/cortex/util/backoff:go_default_library",
        "//internal/cortex/util/grpcencoding/snappy:go_default_library",
        "//internal/cortex/util/middleware:go_default_library",
        "//internal/cortex/util/tls:go_default_library",
        "@com_github_go_kit_log//:log",
        "@com_github_grpc_ecosystem_go_grpc_middleware//:go-grpc-middleware",
        "@com_github_opentracing_contrib_go_grpc//:go-grpc",
        "@com_github_opentracing_opentracing_go//:opentracing-go",
        "@com_github_pkg_errors//:errors",
        "@com_github_prometheus_client_golang//prometheus",
        "@com_github_weaveworks_common//middleware",
        "@org_golang_google_grpc//:go_default_library",
        "@org_golang_google_grpc//codes",
        "@org_golang_google_grpc//encoding/gzip",
        "@org_golang_google_grpc//keepalive",
        "@org_golang_google_grpc//status",
        "@org_golang_x_time//rate",
    ],
)

alias(
    name = "go_default_library",
    actual = ":grpcclient",
    visibility = ["//:__subpackages__"],
)

go_test(
    name = "grpcclient_test",
    srcs = ["ratelimit_test.go"],
    deps = [
        ":go_default_library",
        "@com_github_stretchr_testify//assert",
        "@org_golang_google_grpc//:go_default_library",
        "@org_golang_google_grpc//codes",
        "@org_golang_google_grpc//status",
    ],
)
